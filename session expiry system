import time
import uuid

class SessionManager:
    def __init__(self, session_timeout: int = 60):
        self.session_timeout = session_timeout  # seconds
        self.sessions = {}  # {session_id: expiry_timestamp}

    def create_session(self, user_id: str) -> str:
        """Create a new session for a user and return the session_id"""
        session_id = str(uuid.uuid4())  # unique session token
        expiry_time = time.time() + self.session_timeout
        self.sessions[session_id] = {"user_id": user_id, "expiry": expiry_time}
        return session_id

    def validate_session(self, session_id: str) -> bool:
        """Check if a session is valid (not expired)"""
        current_time = time.time()
        session = self.sessions.get(session_id)

        if not session:
            return False  # session not found

        if current_time > session["expiry"]:
            # Expired → remove it
            del self.sessions[session_id]
            return False

        return True  # session still valid

    def cleanup_sessions(self):
        """Remove all expired sessions"""
        current_time = time.time()
        expired_sessions = [
            sid for sid, data in self.sessions.items()
            if current_time > data["expiry"]
        ]
        for sid in expired_sessions:
            del self.sessions[sid]

    def __repr__(self):
        """For debugging: show active sessions"""
        return f"Active Sessions: {self.sessions}"


# Example usage
if __name__ == "__main__":
    manager = SessionManager(session_timeout=5)  # sessions expire after 5 sec

    # User logs in → session created
    session_id = manager.create_session("alice")
    print("New session created:", session_id)

    # Validate immediately → should be valid
    print("Is session valid?", manager.validate_session(session_id))  # True ✅

    # Wait for 6 seconds → session expires
    time.sleep(6)
    print("Is session valid after expiry?", manager.validate_session(session_id))  # False ❌

    # Cleanup removes expired sessions
    manager.cleanup_sessions()
    print(manager)
